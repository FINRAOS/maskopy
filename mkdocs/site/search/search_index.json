{
    "docs": [
        {
            "location": "/",
            "text": "Overview\n\u00b6\n\n\nMaskopy solution is to Copy and Obfuscate Production Data to Target Environments in AWS. It uses AWS Serverless services, Step functions, Lambda and Fargate. \n\n\nFeatures:\n\u00b6\n\n\nSimplified Copy and Obfuscation\n\u00b6\n\n\nMaskopy copies and provides ability to run obfuscation on production data across AWS accounts. Any sensitive information in the production data is obfuscated in a transient instance. The final obfuscated snapshot is shared in the user-specified environments.\n\n\nSelf-Service and End-To-End Automated\n\u00b6\n\n\nMaskopy is a self-serviced solution that allows users to get production data without involving multiple teams. It is fully automated and is implemented to easily plug into CI/CD pipelines and other automation solutions through SNS or SQS. \n\n\nSecure Design\n\u00b6\n\n\nMaskopy has security controls such as access management via IAM roles, authorization on the caller identity, network access to transient resources controlled through security groups. Bring your own container with third party tools for obfuscation algorithms. \n\n\nBring Your Own Obfuscation Container\n\u00b6\n\n\nMaskopy is a obfuscation tool agnostic solution. Teams can leverage any encryption tools or obfuscation frameworks based on their needs and bake those into a docker container. Bring the container to Maskopy solution  to run data obfuscation",
            "title": "Overview"
        },
        {
            "location": "/#overview",
            "text": "Maskopy solution is to Copy and Obfuscate Production Data to Target Environments in AWS. It uses AWS Serverless services, Step functions, Lambda and Fargate.",
            "title": "Overview"
        },
        {
            "location": "/#features",
            "text": "",
            "title": "Features:"
        },
        {
            "location": "/#simplified-copy-and-obfuscation",
            "text": "Maskopy copies and provides ability to run obfuscation on production data across AWS accounts. Any sensitive information in the production data is obfuscated in a transient instance. The final obfuscated snapshot is shared in the user-specified environments.",
            "title": "Simplified Copy and Obfuscation"
        },
        {
            "location": "/#self-service-and-end-to-end-automated",
            "text": "Maskopy is a self-serviced solution that allows users to get production data without involving multiple teams. It is fully automated and is implemented to easily plug into CI/CD pipelines and other automation solutions through SNS or SQS.",
            "title": "Self-Service and End-To-End Automated"
        },
        {
            "location": "/#secure-design",
            "text": "Maskopy has security controls such as access management via IAM roles, authorization on the caller identity, network access to transient resources controlled through security groups. Bring your own container with third party tools for obfuscation algorithms.",
            "title": "Secure Design"
        },
        {
            "location": "/#bring-your-own-obfuscation-container",
            "text": "Maskopy is a obfuscation tool agnostic solution. Teams can leverage any encryption tools or obfuscation frameworks based on their needs and bake those into a docker container. Bring the container to Maskopy solution  to run data obfuscation",
            "title": "Bring Your Own Obfuscation Container"
        },
        {
            "location": "/quickstart/",
            "text": "Quick Start\n\u00b6\n\n\nThis quick start will help us get started with build, deployment and execution of Maskopy Step Function. \nThe Step Function executes a series of lambda functions and runs a fargate task to obfuscate data.\n\n\nPre-requisites\n\u00b6\n\n\nThis section lists the tools for local setup and AWS resources that are needed for Maskopy to run.\n\n\nLocal Environment\n\u00b6\n\n\nNeed below tools in the local to build lambda functions, connect to AWS accounts and build  docker container for obfuscation.\n\n\n\n\npython3, pip, zip\n\n\naws cli\n\n\ndocker\n\n\n\n\nAWS Environment\n\u00b6\n\n\nMaskopy requires a minimum of two AWS accounts.\n\n\n\n\n\n\nSource Account : This account hosts the RDS instance within a vpc and subnet which needs to be masked and copied to other accounts. \nTake a note of vpc-id and subnet-ids. These will be required to provide as inputs when creating resources in this AWS account.\n\nIAM Roles\n : Follow the steps documented in \nSetup in Source account\n and create IAM roles in source account.\n\n\n\n\n\n\nStaging Account : This account is where the lambdas and step function are deployed and executed from. \nThe final snapshot gets created in this account. This account needs to have a vpc, public and private subnets, route tables for internet access and s3 bucket to stage lambda code. \nJust like from the source account, take a note of AWS 12-digit account number, vpc-id, subnet-ids and s3 bucket name. These will be needed to provide as input to create resources in the AWS account.\n\nIAM Roles\n : Follow the steps documented in \nSetup in Staging account\n and create IAM roles in staging account.\n\n\n\n\n\n\nCurrent version of Maskopy treats the staging account as destination account where the final snapshot is copied.\nFuture versions will be able to obfuscate once in the staging account and copy to multiple destination accounts.  \n\n\nCreate Resources in AWS\n\u00b6\n\n\nAfter all the above pre-requisites are completed, we will create the following resources in source and staging AWS accounts.\n\n\n\n\nKMS Keys\n\n\nSecurity groups\n\n\nECR\n\n\nSQS Queue\n\n\nDeploy Maskopy Lambda and Step functions\n\n\n\n\nFollow the steps in \nAWS Setup\n to create these resources.\n\n\nExecution\n\u00b6\n\n\nAfter the AWS setup is completed, Maskopy Step function is ready to be executed which will obfuscate data and copy the snapshot.\n\n\nStep 1 : Export AWS credentials\n\u00b6\n\n\nExport AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY from staging account and run in a terminal.\n\n\nNote:  If you are using an IAM user to run this setup, then you need to do the following:\n\n\n\n\nAdd trust relationship from your IAM user to the Maskopy Execution role.\n\n\nRun assumeRole to assume the role of the Maskopy Execution role by running below.\n\nSTS_OUTPUT=$(aws sts assume-role --role-arn ${EXECUTION_ROLE_ARN} --role-session-name Maskopy --output text | sed -n '2 p')\nexport AWS_ACCESS_KEY_ID=$(echo \"${STS_OUTPUT}\" | cut -f2)\nexport AWS_SECRET_ACCESS_KEY=$(echo \"${STS_OUTPUT}\" | cut -f4)\nexport AWS_SESSION_TOKEN=$(echo \"${STS_OUTPUT}\" | cut -f5)\nexport AWS_SECURITY_TOKEN=$(echo \"${STS_OUTPUT}\" | cut -f5)\n\n\n\n\n\nStep 2 : Provide Input\n\u00b6\n\n\nInput to Maskopy is provided through environment variables. Below are the list of input that is required to run Maskopy. Refer to the description and examples of all the variables in the table below.\n\n\n\n\n\n\n\n\nEnv Variable\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nAPPLICATION_NAME\n\n\nName of the application running Maskopy. \nThe name must be part of IAM user/role name executing the step function\n.\n\n\nMASKOPY\n\n\n\n\n\n\nCOST_CENTER\n\n\nAll the temporary resources are tagged with the code.\n\n\nabc123\n\n\n\n\n\n\nDESTINATION_ENV\n\n\nSDLC environment name\n\n\ndev\n\n\n\n\n\n\nOBFUSCATION_SCRIPT_PATH\n\n\nLocation of bootstrap.sh in S3 bucket\n\n\nmy-obfuscation-bucket-name/obfuscation\n\n\n\n\n\n\nRDS_OPTION_GROUP\n\n\nOptional parameter\n\n\n\n\n\n\n\n\nRDS_PARAMETER_GROUP\n\n\nOptional parameter\n\n\n\n\n\n\n\n\nRDS_SNAPSHOT_IDENTIFIER\n\n\nThis is the rds snapshot id in the source account. \nMust be tagged with key:ApplicationName and Value: <APPLICATION_NAME>\n.\n\n\nrds:myapp-ora-maskopy-test-1-2019-11-25-06-12\n\n\n\n\n\n\nSTEP_FN_ARN\n\n\nArn of the step function to execute.\n\n\narn:aws:states:us-east-1:123456789012:stateMachine:MASKOPY-CLIENT-StateMachine\n\n\n\n\n\n\n\n\nExport the following environment variables into the shell.\n\nexport\n \nAPPLICATION_NAME\n=\n\"<APP_NAME>\"\n\n\nexport\n \nCOST_CENTER\n=\n\"<COST_CENTER_FOR_BILLING>\"\n\n\nexport\n \nDESTINATION_ENV\n=\n\"<TARGET_ENV>\"\n\n\nexport\n \nOBFUSCATION_SCRIPT_PATH\n=\n\"<S3_BUCKET_NAME>/obfuscation>\"\n\n\nexport\n \nRDS_OPTION_GROUP\n=\n\"<RDS_OPTION_GROUP_NAME-OPTIONAL>\"\n\n\nexport\n \nRDS_PARAMETER_GROUP\n=\n\"<RDS_PARAMETER_GROUP_NAME-OPTIONAL>\"\n\n\nexport\n \nRDS_SNAPSHOT_IDENTIFIER\n=\n\"<DB_SNAPSHOT_NAME_IN_SOURCE_ACCOUNT>\"\n\n\nexport\n \nSTEP_FN_ARN\n=\n\"arn:aws:states:<AWS_REGION>:<STAGING_ACCOUNT_ID>:stateMachine:MASKOPY-CLIENT-StateMachine\"\n\n\n\n\nStep 3 : Run Maskopy\n\u00b6\n\n\nThis script starts the execution of Maskopy Step Function.\n\n\n./maskopy.sh\n\n\n\n\nBelow is a visualization of successful implementation of the state machine.",
            "title": "Quick Start"
        },
        {
            "location": "/quickstart/#quick-start",
            "text": "This quick start will help us get started with build, deployment and execution of Maskopy Step Function. \nThe Step Function executes a series of lambda functions and runs a fargate task to obfuscate data.",
            "title": "Quick Start"
        },
        {
            "location": "/quickstart/#pre-requisites",
            "text": "This section lists the tools for local setup and AWS resources that are needed for Maskopy to run.",
            "title": "Pre-requisites"
        },
        {
            "location": "/quickstart/#local-environment",
            "text": "Need below tools in the local to build lambda functions, connect to AWS accounts and build  docker container for obfuscation.   python3, pip, zip  aws cli  docker",
            "title": "Local Environment"
        },
        {
            "location": "/quickstart/#aws-environment",
            "text": "Maskopy requires a minimum of two AWS accounts.    Source Account : This account hosts the RDS instance within a vpc and subnet which needs to be masked and copied to other accounts. \nTake a note of vpc-id and subnet-ids. These will be required to provide as inputs when creating resources in this AWS account. IAM Roles  : Follow the steps documented in  Setup in Source account  and create IAM roles in source account.    Staging Account : This account is where the lambdas and step function are deployed and executed from. \nThe final snapshot gets created in this account. This account needs to have a vpc, public and private subnets, route tables for internet access and s3 bucket to stage lambda code. \nJust like from the source account, take a note of AWS 12-digit account number, vpc-id, subnet-ids and s3 bucket name. These will be needed to provide as input to create resources in the AWS account. IAM Roles  : Follow the steps documented in  Setup in Staging account  and create IAM roles in staging account.    Current version of Maskopy treats the staging account as destination account where the final snapshot is copied.\nFuture versions will be able to obfuscate once in the staging account and copy to multiple destination accounts.",
            "title": "AWS Environment"
        },
        {
            "location": "/quickstart/#create-resources-in-aws",
            "text": "After all the above pre-requisites are completed, we will create the following resources in source and staging AWS accounts.   KMS Keys  Security groups  ECR  SQS Queue  Deploy Maskopy Lambda and Step functions   Follow the steps in  AWS Setup  to create these resources.",
            "title": "Create Resources in AWS"
        },
        {
            "location": "/quickstart/#execution",
            "text": "After the AWS setup is completed, Maskopy Step function is ready to be executed which will obfuscate data and copy the snapshot.",
            "title": "Execution"
        },
        {
            "location": "/quickstart/#step-1-export-aws-credentials",
            "text": "Export AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY from staging account and run in a terminal.  Note:  If you are using an IAM user to run this setup, then you need to do the following:   Add trust relationship from your IAM user to the Maskopy Execution role.  Run assumeRole to assume the role of the Maskopy Execution role by running below. STS_OUTPUT=$(aws sts assume-role --role-arn ${EXECUTION_ROLE_ARN} --role-session-name Maskopy --output text | sed -n '2 p')\nexport AWS_ACCESS_KEY_ID=$(echo \"${STS_OUTPUT}\" | cut -f2)\nexport AWS_SECRET_ACCESS_KEY=$(echo \"${STS_OUTPUT}\" | cut -f4)\nexport AWS_SESSION_TOKEN=$(echo \"${STS_OUTPUT}\" | cut -f5)\nexport AWS_SECURITY_TOKEN=$(echo \"${STS_OUTPUT}\" | cut -f5)",
            "title": "Step 1 : Export AWS credentials"
        },
        {
            "location": "/quickstart/#step-2-provide-input",
            "text": "Input to Maskopy is provided through environment variables. Below are the list of input that is required to run Maskopy. Refer to the description and examples of all the variables in the table below.     Env Variable  Description  Example      APPLICATION_NAME  Name of the application running Maskopy.  The name must be part of IAM user/role name executing the step function .  MASKOPY    COST_CENTER  All the temporary resources are tagged with the code.  abc123    DESTINATION_ENV  SDLC environment name  dev    OBFUSCATION_SCRIPT_PATH  Location of bootstrap.sh in S3 bucket  my-obfuscation-bucket-name/obfuscation    RDS_OPTION_GROUP  Optional parameter     RDS_PARAMETER_GROUP  Optional parameter     RDS_SNAPSHOT_IDENTIFIER  This is the rds snapshot id in the source account.  Must be tagged with key:ApplicationName and Value: <APPLICATION_NAME> .  rds:myapp-ora-maskopy-test-1-2019-11-25-06-12    STEP_FN_ARN  Arn of the step function to execute.  arn:aws:states:us-east-1:123456789012:stateMachine:MASKOPY-CLIENT-StateMachine     Export the following environment variables into the shell. export   APPLICATION_NAME = \"<APP_NAME>\"  export   COST_CENTER = \"<COST_CENTER_FOR_BILLING>\"  export   DESTINATION_ENV = \"<TARGET_ENV>\"  export   OBFUSCATION_SCRIPT_PATH = \"<S3_BUCKET_NAME>/obfuscation>\"  export   RDS_OPTION_GROUP = \"<RDS_OPTION_GROUP_NAME-OPTIONAL>\"  export   RDS_PARAMETER_GROUP = \"<RDS_PARAMETER_GROUP_NAME-OPTIONAL>\"  export   RDS_SNAPSHOT_IDENTIFIER = \"<DB_SNAPSHOT_NAME_IN_SOURCE_ACCOUNT>\"  export   STEP_FN_ARN = \"arn:aws:states:<AWS_REGION>:<STAGING_ACCOUNT_ID>:stateMachine:MASKOPY-CLIENT-StateMachine\"",
            "title": "Step 2 : Provide Input"
        },
        {
            "location": "/quickstart/#step-3-run-maskopy",
            "text": "This script starts the execution of Maskopy Step Function.  ./maskopy.sh  Below is a visualization of successful implementation of the state machine.",
            "title": "Step 3 : Run Maskopy"
        },
        {
            "location": "/aws-setup/",
            "text": "In this section, we will cover the setup that is required in the AWS accounts.\n\n\nSource Account setup\n\u00b6\n\n\nStep 1 : Export AWS credentials\n\u00b6\n\n\nExport AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY from source account and run in a terminal\n\n\nStep 2 : Create KMS Key\n\u00b6\n\n\nThis step creates a customer managed kms key and sets the cross account policies.\nThe parameters passed are exported into environment variables.\nReplace the SOURCE_ACCOUNT_ID and STAGING_ACCOUNT_ID in below command to Source and Staging AWS account numbers.\n\n\n./deploy/keys/deploy.sh -l LAMBDA_MASKOPY -r <AWS_REGION> -s <SOURCE_ACCOUNT_ID> -t <STAGING_ACCOUNT_ID>\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nEnv Variable\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n-l\n\n\nLAMBDA_ROLE_NAME\n\n\nName of lambda execution role in staging account\n\n\nLAMBDA_MASKOPY\n\n\n\n\n\n\n-r\n\n\nAWS_REGION\n\n\nAWS region\n\n\nus-east-1\n\n\n\n\n\n\n-s\n\n\nSOURCE_ACCOUNT_ID\n\n\nAWS Source Account Number\n\n\n123456789011\n\n\n\n\n\n\n-t\n\n\nSTAGING_ACCOUNT_ID\n\n\nAWS Staging Account Number\n\n\n123456789012\n\n\n\n\n\n\n\n\nStaging Account setup\n\u00b6\n\n\nStep 1 : Export AWS credentials\n\u00b6\n\n\nExport AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY from staging account and run in a terminal.\n\n\nStep 2 : Create Security Groups\n\u00b6\n\n\nThis script creates a cloudformation stack named \"MASKOPY-security-group\" with the json template in sg-cf.json.\nThe stack creates 2 SGs named MASKOPY-app and MASKOPY-db with inbound and outbound rules as mentioned in sg-cf.json.\n\n\n./deploy/security_groups/deploy.sh -i \n0\n.0.0.0/0 -r <AWS_REGION> -v <STAGING-VPC-ID>\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nEnv Variable\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n-i\n\n\nCIDR_RANGE\n\n\nThe lambdas assume source account role by getting temporary credentials from AWS sts. This cidr range is added to the outbound rules to establish sts connection.\n\n\n0.0.0.0/0\n\n\n\n\n\n\n-r\n\n\nAWS_REGION\n\n\nAWS region\n\n\nus-east-1\n\n\n\n\n\n\n-v\n\n\nVPC_ID\n\n\nAWS Staging VPC ID\n\n\nvpc-123456\n\n\n\n\n\n\n\n\nStep 3 : Create an ECR repository, build and push common image.\n\u00b6\n\n\nThis script creates an ECR repo named 'maskopy'. This repo hosts the image used by fargate task that obfuscates the data.\n\n\n./deploy/ecr/create_ecr.sh -r <AWS_REGION>\n\n\n\n\nThis will build a docker image with postgresql and basic tools.\n\n./docker/postgres/build-image.sh -a <STAGING_ACCOUNT_ID> -r <AWS_REGION>\n\n\n\nPushing the image built in above step to ECR.\n\n./docker/postgres/push-image.sh -a <STAGING_ACCOUNT_ID> -r <AWS_REGION>\n\n\n\nStep 4 : Create an sqs queue.\n\u00b6\n\n\nThis queue is used by the Step Function to publish results of either success or failure.\nOnce the message is posted in the queue, there can be custom implementations to email the results of the execution.\nAlternative implementations can publish the messages to SNS.\n\n\n./deploy/sqs/create_sqs.sh -n <SQS_QUEUE_NAME> -r <AWS_REGION>\n\n\n\n\nMaskopy Deployment\n\u00b6\n\n\nThis step builds and deploys the lambda functions and Step function to the staging environment.\n\n\nStep 1 : Export AWS credentials.\n\u00b6\n\n\nExport AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY from staging account and run in a terminal.\n\n\nStep 2 : Export environment variables.\n\u00b6\n\n\nExport the following environment variables into the shell. Refer to the description and examples of all the variables in the table below.\n    \n    \nexport\n \nAWS_REGION\n=\n\"<AWS_REGION>\"\n\n    \nexport\n \nCROSS_ACCOUNT_ROLE\n=\n\"arn:aws:iam::<SOURCE_ACCOUNT_ID>:role/Xacnt_APP_MASKOPY\"\n\n    \nexport\n \nCOST_CENTER\n=\n\"<COST_CENTER_FOR_BILLING>\"\n\n    \nexport\n \nDESTINATION_ACCOUNT_ID\n=\n\"<STAGING_ACCOUNT_ID>\"\n\n    \nexport\n \nFARGATE_SECURITY_GROUP\n=\n\"<ID_OF_LAMBDA_SG>\"\n\n    \nexport\n \nFARGATE_SUBNET0\n=\n\"<STAGING_PRIVATE_SUBNET_ID>\"\n\n    \nexport\n \nFARGATE_SUBNET1\n=\n\"<STAGING_PRIVATE_SUBNET_ID>\"\n\n    \nexport\n \nLAMBDA_BUCKET_LOCATION\n=\n\"<S3_BUCKET_NAME>/MASKOPY\"\n\n    \nexport\n \nLAMBDA_ROLE\n=\n\"LAMBDA_MASKOPY\"\n\n    \nexport\n \nLAMBDA_SECURITY_GROUP\n=\n\"<ID_OF_LAMBDA_SG>\"\n\n    \nexport\n \nLAMBDA_SUBNET_LIST\n=\n\"<STAGING_PRIVATE_SUBNET_ID_1,STAGING_PRIVATE_SUBNET_ID_2>\"\n\n    \nexport\n \nORIGINAL_KMS_KEY\n=\n\"arn:aws:kms:<AWS_REGION>:<STAGING_ACCOUNT_ID>:key/key_uuid\"\n\n    \nexport\n \nRDS_SUBNET_GROUP\n=\n\"STAGING_RDS_SUBNET_GROUP_NAME\"\n\n    \nexport\n \nRDS_SECURITY_GROUP\n=\n\"STAGING_RDS_SECURITY_GROUP\"\n\n    \nexport\n \nSQS_NAME\n=\n\"<SQS_QUEUE_NAME>\"\n\n    \nexport\n \nSTAGING_ACCOUNT_ID\n=\n\"<STAGING_ACCOUNT_ID>\"\n\n    \nexport\n \nSTAGING_KEY\n=\n\"arn:aws:kms:<AWS_REGION>:<STAGING_ACCOUNT_ID>:alias/aws/rds\"\n\n\n\n\n\n\n\n\n\n\nEnv Variable\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nAWS_REGION\n\n\naws region\n\n\nus-east-1\n\n\n\n\n\n\nCROSS_ACCOUNT_ROLE\n\n\nArn of cross account role in source account. The lambdas will be assuming this role to perform actions in Source Account. This role is passed to multiple lambda functions as an env variable.\n\n\narn:aws:iam::123456789011:role/Xacnt_APP_MASKOPY\n\n\n\n\n\n\nCOST_CENTER\n\n\nAll the lambda functions are tagged with \"Cost Center\" for billing purposes\n\n\nabc123\n\n\n\n\n\n\nDESTINATION_ACCOUNT_ID\n\n\n12 digit AWS account id where the final snapshot will be copied to.\n\n\n123456789012\n\n\n\n\n\n\nFARGATE_SECURITY_GROUP\n\n\nSecurity group associated to the fargate task. We have created MASKOPY-app in the above steps. Use SG-id of MASKOPY-app.\n\n\nsg-01234567891234\n\n\n\n\n\n\nFARGATE_SUBNET0\n\n\nPrivate subnet id in one availability zone to be associated to the fargate task.\n\n\nsubnet-01234567891234\n\n\n\n\n\n\nFARGATE_SUBNET1\n\n\nPrivate subnet id in another availability zone to be associated to the fargate task.\n\n\nsubnet-12340123456789\n\n\n\n\n\n\nLAMBDA_BUCKET_LOCATION\n\n\nS3 bucket location where lambda code is zipped and staged.\n\n\nmy-obfuscation-bucket-name/MASKOPY\n\n\n\n\n\n\nLAMBDA_ROLE\n\n\nRole to be associated to the lambda functions.\n\n\nLAMBDA_MASKOPY\n\n\n\n\n\n\nLAMBDA_SECURITY_GROUP\n\n\nSecurity group associated with the lambda functions.\n\n\nsg-01234567891234\n\n\n\n\n\n\nLAMBDA_SUBNET_LIST\n\n\nComma separated private subnet ids associated with the lambda functions.\n\n\nsubnet-01234567891234,subnet-12340123456789\n\n\n\n\n\n\nORIGINAL_KMS_KEY\n\n\nKms key arn in the source account.\n\n\narn:aws:kms:us-east-1:123456789011:key/00000000-1111-aaaa-bbbb-0123456789012\n\n\n\n\n\n\nRDS_SUBNET_GROUP\n\n\nRDS Subnet group name to be associated with the RDS in staging account.\n\n\nmaskopy-db-subnet\n\n\n\n\n\n\nRDS_SECURITY_GROUP\n\n\nRDS Security group to be associated with RDS in staging account.\n\n\ndefault\n\n\n\n\n\n\nSQS_NAME\n\n\nSQS name to publish results of the execution.\n\n\nmaskopy-queue\n\n\n\n\n\n\nSTAGING_ACCOUNT_ID\n\n\n12 digit AWS account id of the staging account.\n\n\n123456789012\n\n\n\n\n\n\nSTAGING_KEY\n\n\nAWS managed RDS kms key in staging account.\n\n\narn:aws:kms:us-east-1:123456789012:alias/aws/rds\n\n\n\n\n\n\n\n\nStep 3 : Build and deploy lambda functions and step function.\n\u00b6\n\n\nThis script builds the lambda functions with python3 using requirements.txt and zips the lambda artifacts.\nThe artifacts are copied to S3 bucket and pulled during lambda execution. The script then deploys the lambdas and step function state machine.\n\n\n./deploy/deploy.sh\n\n\nAt the end of the deployment, you would see two cloudformation stacks created in the Staging account.\n\n\nCloudformation stack name:\n- MASKOPY-stepfunction\n- MASKOPY-lambda",
            "title": "AWS Setup"
        },
        {
            "location": "/aws-setup/#source-account-setup",
            "text": "",
            "title": "Source Account setup"
        },
        {
            "location": "/aws-setup/#step-1-export-aws-credentials",
            "text": "Export AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY from source account and run in a terminal",
            "title": "Step 1 : Export AWS credentials"
        },
        {
            "location": "/aws-setup/#step-2-create-kms-key",
            "text": "This step creates a customer managed kms key and sets the cross account policies.\nThe parameters passed are exported into environment variables.\nReplace the SOURCE_ACCOUNT_ID and STAGING_ACCOUNT_ID in below command to Source and Staging AWS account numbers.  ./deploy/keys/deploy.sh -l LAMBDA_MASKOPY -r <AWS_REGION> -s <SOURCE_ACCOUNT_ID> -t <STAGING_ACCOUNT_ID>     Option  Env Variable  Description  Example      -l  LAMBDA_ROLE_NAME  Name of lambda execution role in staging account  LAMBDA_MASKOPY    -r  AWS_REGION  AWS region  us-east-1    -s  SOURCE_ACCOUNT_ID  AWS Source Account Number  123456789011    -t  STAGING_ACCOUNT_ID  AWS Staging Account Number  123456789012",
            "title": "Step 2 : Create KMS Key"
        },
        {
            "location": "/aws-setup/#staging-account-setup",
            "text": "",
            "title": "Staging Account setup"
        },
        {
            "location": "/aws-setup/#step-1-export-aws-credentials_1",
            "text": "Export AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY from staging account and run in a terminal.",
            "title": "Step 1 : Export AWS credentials"
        },
        {
            "location": "/aws-setup/#step-2-create-security-groups",
            "text": "This script creates a cloudformation stack named \"MASKOPY-security-group\" with the json template in sg-cf.json.\nThe stack creates 2 SGs named MASKOPY-app and MASKOPY-db with inbound and outbound rules as mentioned in sg-cf.json.  ./deploy/security_groups/deploy.sh -i  0 .0.0.0/0 -r <AWS_REGION> -v <STAGING-VPC-ID>     Option  Env Variable  Description  Example      -i  CIDR_RANGE  The lambdas assume source account role by getting temporary credentials from AWS sts. This cidr range is added to the outbound rules to establish sts connection.  0.0.0.0/0    -r  AWS_REGION  AWS region  us-east-1    -v  VPC_ID  AWS Staging VPC ID  vpc-123456",
            "title": "Step 2 : Create Security Groups"
        },
        {
            "location": "/aws-setup/#step-3-create-an-ecr-repository-build-and-push-common-image",
            "text": "This script creates an ECR repo named 'maskopy'. This repo hosts the image used by fargate task that obfuscates the data.  ./deploy/ecr/create_ecr.sh -r <AWS_REGION>  This will build a docker image with postgresql and basic tools. ./docker/postgres/build-image.sh -a <STAGING_ACCOUNT_ID> -r <AWS_REGION>  Pushing the image built in above step to ECR. ./docker/postgres/push-image.sh -a <STAGING_ACCOUNT_ID> -r <AWS_REGION>",
            "title": "Step 3 : Create an ECR repository, build and push common image."
        },
        {
            "location": "/aws-setup/#step-4-create-an-sqs-queue",
            "text": "This queue is used by the Step Function to publish results of either success or failure.\nOnce the message is posted in the queue, there can be custom implementations to email the results of the execution.\nAlternative implementations can publish the messages to SNS.  ./deploy/sqs/create_sqs.sh -n <SQS_QUEUE_NAME> -r <AWS_REGION>",
            "title": "Step 4 : Create an sqs queue."
        },
        {
            "location": "/aws-setup/#maskopy-deployment",
            "text": "This step builds and deploys the lambda functions and Step function to the staging environment.",
            "title": "Maskopy Deployment"
        },
        {
            "location": "/aws-setup/#step-1-export-aws-credentials_2",
            "text": "Export AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY from staging account and run in a terminal.",
            "title": "Step 1 : Export AWS credentials."
        },
        {
            "location": "/aws-setup/#step-2-export-environment-variables",
            "text": "Export the following environment variables into the shell. Refer to the description and examples of all the variables in the table below.\n          export   AWS_REGION = \"<AWS_REGION>\" \n     export   CROSS_ACCOUNT_ROLE = \"arn:aws:iam::<SOURCE_ACCOUNT_ID>:role/Xacnt_APP_MASKOPY\" \n     export   COST_CENTER = \"<COST_CENTER_FOR_BILLING>\" \n     export   DESTINATION_ACCOUNT_ID = \"<STAGING_ACCOUNT_ID>\" \n     export   FARGATE_SECURITY_GROUP = \"<ID_OF_LAMBDA_SG>\" \n     export   FARGATE_SUBNET0 = \"<STAGING_PRIVATE_SUBNET_ID>\" \n     export   FARGATE_SUBNET1 = \"<STAGING_PRIVATE_SUBNET_ID>\" \n     export   LAMBDA_BUCKET_LOCATION = \"<S3_BUCKET_NAME>/MASKOPY\" \n     export   LAMBDA_ROLE = \"LAMBDA_MASKOPY\" \n     export   LAMBDA_SECURITY_GROUP = \"<ID_OF_LAMBDA_SG>\" \n     export   LAMBDA_SUBNET_LIST = \"<STAGING_PRIVATE_SUBNET_ID_1,STAGING_PRIVATE_SUBNET_ID_2>\" \n     export   ORIGINAL_KMS_KEY = \"arn:aws:kms:<AWS_REGION>:<STAGING_ACCOUNT_ID>:key/key_uuid\" \n     export   RDS_SUBNET_GROUP = \"STAGING_RDS_SUBNET_GROUP_NAME\" \n     export   RDS_SECURITY_GROUP = \"STAGING_RDS_SECURITY_GROUP\" \n     export   SQS_NAME = \"<SQS_QUEUE_NAME>\" \n     export   STAGING_ACCOUNT_ID = \"<STAGING_ACCOUNT_ID>\" \n     export   STAGING_KEY = \"arn:aws:kms:<AWS_REGION>:<STAGING_ACCOUNT_ID>:alias/aws/rds\"      Env Variable  Description  Example      AWS_REGION  aws region  us-east-1    CROSS_ACCOUNT_ROLE  Arn of cross account role in source account. The lambdas will be assuming this role to perform actions in Source Account. This role is passed to multiple lambda functions as an env variable.  arn:aws:iam::123456789011:role/Xacnt_APP_MASKOPY    COST_CENTER  All the lambda functions are tagged with \"Cost Center\" for billing purposes  abc123    DESTINATION_ACCOUNT_ID  12 digit AWS account id where the final snapshot will be copied to.  123456789012    FARGATE_SECURITY_GROUP  Security group associated to the fargate task. We have created MASKOPY-app in the above steps. Use SG-id of MASKOPY-app.  sg-01234567891234    FARGATE_SUBNET0  Private subnet id in one availability zone to be associated to the fargate task.  subnet-01234567891234    FARGATE_SUBNET1  Private subnet id in another availability zone to be associated to the fargate task.  subnet-12340123456789    LAMBDA_BUCKET_LOCATION  S3 bucket location where lambda code is zipped and staged.  my-obfuscation-bucket-name/MASKOPY    LAMBDA_ROLE  Role to be associated to the lambda functions.  LAMBDA_MASKOPY    LAMBDA_SECURITY_GROUP  Security group associated with the lambda functions.  sg-01234567891234    LAMBDA_SUBNET_LIST  Comma separated private subnet ids associated with the lambda functions.  subnet-01234567891234,subnet-12340123456789    ORIGINAL_KMS_KEY  Kms key arn in the source account.  arn:aws:kms:us-east-1:123456789011:key/00000000-1111-aaaa-bbbb-0123456789012    RDS_SUBNET_GROUP  RDS Subnet group name to be associated with the RDS in staging account.  maskopy-db-subnet    RDS_SECURITY_GROUP  RDS Security group to be associated with RDS in staging account.  default    SQS_NAME  SQS name to publish results of the execution.  maskopy-queue    STAGING_ACCOUNT_ID  12 digit AWS account id of the staging account.  123456789012    STAGING_KEY  AWS managed RDS kms key in staging account.  arn:aws:kms:us-east-1:123456789012:alias/aws/rds",
            "title": "Step 2 : Export environment variables."
        },
        {
            "location": "/aws-setup/#step-3-build-and-deploy-lambda-functions-and-step-function",
            "text": "This script builds the lambda functions with python3 using requirements.txt and zips the lambda artifacts.\nThe artifacts are copied to S3 bucket and pulled during lambda execution. The script then deploys the lambdas and step function state machine.  ./deploy/deploy.sh \nAt the end of the deployment, you would see two cloudformation stacks created in the Staging account.  Cloudformation stack name:\n- MASKOPY-stepfunction\n- MASKOPY-lambda",
            "title": "Step 3 : Build and deploy lambda functions and step function."
        },
        {
            "location": "/iam-roles/",
            "text": "AWS IAM Roles Setup\n\u00b6\n\n\nAWS IAM role is required to run the Maskopy solution's Step functions, Lambda and Fargate tasks. Since Maskopy needs to access resources like RDS snapshots from a source account that is different than its current account, it needs Cross account access.\nWe will look at how to setup these IAM roles in the source and staging accounts.\nMake a note of the account IDs for Source and staging accounts since they will be used in the IAM roles.\n\n\nIAM Roles\n\u00b6\n\n\nSource Account\n\u00b6\n\n\nCreate the Cross-Account role, \nXACNT_MASKOPY\n in the \nSource Account\n to share and copy snapshots from Source Account to Staging Account. The purpose of this role is to copy RDS snapshots to share with the staging account. It also require delete permissions on RDS snapshots to cleanup the transient snapshot copies that were made during the maskopy execution. The delete permission is limited to only RDS snapshots with the prefix \nmaskopy\n. This ensures that this role allows maskopy to delete only the snapshots that are created by maskopy.\n\n\nReplace \\\n with staging account number. Replace \\\n with source account number.\n\n\nIAM role\n\u00b6\n\n\n{\n\n       \n\"Version\"\n:\n \n\"2012-10-17\"\n,\n\n       \n\"Statement\"\n:\n \n[\n\n           \n{\n\n               \n\"Sid\"\n:\n \n\"KMSandLogs\"\n,\n\n               \n\"Effect\"\n:\n \n\"Allow\"\n,\n\n               \n\"Action\"\n:\n \n[\n\n                   \n\"logs:CreateLogStream\"\n,\n\n                   \n\"kms:List*\"\n,\n\n                   \n\"kms:Get*\"\n,\n\n                   \n\"kms:CreateAlias\"\n,\n\n                   \n\"kms:Describe*\"\n,\n\n                   \n\"kms:CreateKey\"\n,\n\n                   \n\"kms:CreateGrant\"\n,\n\n                   \n\"logs:CreateLogGroup\"\n,\n\n                   \n\"logs:PutLogEvents\"\n,\n\n                   \n\"kms:ReEncrypt*\"\n\n               \n],\n\n               \n\"Resource\"\n:\n \n\"*\"\n\n           \n},\n\n           \n{\n\n               \n\"Sid\"\n:\n \n\"RDSSnapshotPolicy\"\n,\n\n               \n\"Effect\"\n:\n \n\"Allow\"\n,\n\n               \n\"Action\"\n:\n \n[\n\n                   \n\"rds:ListTagsForResource\"\n,\n\n                   \n\"rds:DescribeDBSnapshots\"\n,\n\n                   \n\"rds:CopyDBSnapshot\"\n,\n\n                   \n\"rds:ModifyDBSnapshotAttribute\"\n\n               \n],\n\n               \n\"Resource\"\n:\n \n\"arn:aws:rds:*:<SOURCE-ACCOUNT>:*:*\"\n\n           \n},\n\n           \n{\n\n               \n\"Sid\"\n:\n \n\"RDSDeletePolicy\"\n,\n\n               \n\"Effect\"\n:\n \n\"Allow\"\n,\n\n               \n\"Action\"\n:\n \n[\n\n                   \n\"rds:DeleteDBSnapshot\"\n\n               \n],\n\n               \n\"Resource\"\n:\n \n\"arn:aws:rds:*:<SOURCE-ACCOUNT>:*:maskopy*\"\n\n           \n}\n\n       \n]\n\n \n}\n\n\n\n\n\nStaging account\n\u00b6\n\n\nLambda and Step function role\n\u00b6\n\n\nCreate an IAM role - \nLAMBDA_MASKOPY\n for Maskopy's Lambda and Step function. This role will be created in the staging account.\n\n\nAdd below AWS Managed policy for Lambda\n - \nAWSLambdaExecute\n\n - \nAWSLambdaRole\n\n - Below is a custom policy that is required to access other services such as ECS/Fargate, KMS, RDS.\n\n\nReplace \\\n with staging account number. Replace \\\n with source account number.\n\n\n{\n\n \n\"Version\"\n:\n \n\"2012-10-17\"\n,\n\n    \n\"Statement\"\n:\n \n[\n\n        \n{\n\n            \n\"Sid\"\n:\n \n\"MultiplePolicy\"\n,\n\n            \n\"Effect\"\n:\n \n\"Allow\"\n,\n\n            \n\"Action\"\n:\n \n[\n\n                \n\"events:Put*\"\n,\n\n                \n\"events:DescribeRule\"\n,\n\n                \n\"rds:DescribeDBSnapshots\"\n,\n\n                \n\"ecs:CreateCluster\"\n,\n\n                \n\"ec2:DeleteNetworkInterface\"\n,\n\n                \n\"rds:DescribeDBParameterGroups\"\n,\n\n                \n\"s3:ListBucket\"\n,\n\n                \n\"ecs:DeregisterTaskDefinition\"\n,\n\n                \n\"ec2:CreateNetworkInterface\"\n,\n\n                \n\"ec2:DescribeNetworkInterfaces\"\n,\n\n                \n\"ecs:RegisterTaskDefinition\"\n,\n\n                \n\"rds:DescribeDBInstances\"\n,\n\n                \n\"rds:DescribeOptionGroups\"\n,\n\n                \n\"rds:AddTagsToResource\"\n\n            \n],\n\n            \n\"Resource\"\n:\n \n\"*\"\n\n        \n},\n\n        \n{\n\n            \n\"Sid\"\n:\n \n\"RDSPolicy\"\n,\n\n            \n\"Effect\"\n:\n \n\"Allow\"\n,\n\n            \n\"Action\"\n:\n \n[\n\n                \n\"rds:CreateDBSnapshot\"\n,\n\n                \n\"rds:RestoreDBInstanceFromDBSnapshot\"\n\n            \n],\n\n            \n\"Resource\"\n:\n \n[\n\n                \n\"arn:aws:rds:*:*:*:*maskopy*\"\n,\n\n                \n\"arn:aws:rds:*:*:*:default*\"\n\n            \n]\n\n        \n},\n\n        \n{\n\n            \n\"Sid\"\n:\n \n\"PassRolePolicy\"\n,\n\n            \n\"Effect\"\n:\n \n\"Allow\"\n,\n\n            \n\"Action\"\n:\n \n\"iam:PassRole\"\n,\n\n            \n\"Resource\"\n:\n \n\"arn:aws:iam::<STAGING-ACCOUNT>:role/*MASKOPY*\"\n\n        \n},\n\n        \n{\n\n            \n\"Sid\"\n:\n \n\"RDSMaskopyPolicy\"\n,\n\n            \n\"Effect\"\n:\n \n\"Allow\"\n,\n\n            \n\"Action\"\n:\n \n\"rds:*\"\n,\n\n            \n\"Resource\"\n:\n \n[\n\n                \n\"arn:aws:rds:*:*:db:maskopy*\"\n,\n\n                \n\"arn:aws:rds:*:*:snapshot:*maskopy*\"\n\n            \n]\n\n        \n}\n\n    \n]\n\n\n}\n\n\n\n\n\nUpdates to Lambda Role after KMS Keys are created\n\u00b6\n\n\nSkip this step if you have not created KMS Keys in Source account. KMS keys creation is described here.\nOnce the KMS keys are created in the Source account, Note the KMS Key ID. It needs to be replaced in the below Policy.\nAlso replace Source account, staging account, Staging-DefaultRDSKMSKeyID.\n\n\nUpdate the LAMBDA_MASKOPY IAM role and modify with below policy.\n\n\nReplace \\\n with staging account number. Replace \\\n with source account number.\n\n\n        \n{\n\n            \n\"Sid\"\n:\n \n\"KMSPolicy\"\n,\n\n            \n\"Effect\"\n:\n \n\"Allow\"\n,\n\n            \n\"Action\"\n:\n \n[\n\n                \n\"kms:RevokeGrant\"\n,\n\n                \n\"kms:CreateGrant\"\n,\n\n                \n\"kms:ListGrants\"\n\n            \n],\n\n            \n\"Resource\"\n:\n \n[\n\n                \n\"arn:aws:kms:us-east-1:<STAGING-ACCOUNT>:key/<STAGING-DefaultRDSKMSKey>\"\n,\n\n                \n\"arn:aws:kms:us-east-1:<SOURCE-ACCOUNT>:key/<SOURCE-KMSKeyID>\"\n\n            \n],\n\n            \n\"Condition\"\n:\n \n{\n\n                \n\"Bool\"\n:\n \n{\n\n                    \n\"kms:GrantIsForAWSResource\"\n:\n \n\"true\"\n\n                \n}\n\n            \n}\n\n        \n}\n,\n\n         \n{\n\n            \n\"Sid\"\n:\n \n\"MaskopyLambdaPolicy\"\n,\n\n            \n\"Effect\"\n:\n \n\"Allow\"\n,\n\n            \n\"Action\"\n:\n \n[\n\n                \n\"sts:AssumeRole\"\n,\n\n                \n\"kms:Decrypt\"\n,\n\n                \n\"ecs:RunTask\"\n,\n\n                \n\"kms:Encrypt\"\n,\n\n                \n\"sqs:SendMessage\"\n,\n\n                \n\"kms:DescribeKey\"\n,\n\n                \n\"ecs:StartTask\"\n,\n\n                \n\"ecs:DeleteCluster\"\n,\n\n                \n\"kms:RetireGrant\"\n,\n\n                \n\"ecs:DescribeTasks\"\n,\n\n                \n\"ecs:DescribeClusters\"\n\n            \n],\n\n            \n\"Resource\"\n:\n \n[\n\n                \n\"arn:aws:iam::*:role/Xacnt_MASKOPY\"\n,\n\n                \n\"arn:aws:kms:us-east-1:<STAGING-ACCOUNT>:key/<STAGING-DefaultRDSKMSKey>\"\n,\n\n                \n\"arn:aws:kms:us-east-1:<SOURCE-ACCOUNT>:key/<SOURCE-KMSKeyID>\"\n,\n\n                \n\"arn:aws:ecs:*:<STAGING-ACCOUNT>:task-definition/*:*\"\n,\n\n                \n\"arn:aws:ecs:*:<STAGING-ACCOUNT>:cluster/*\"\n,\n\n                \n\"arn:aws:ecs:*:<STAGING-ACCOUNT>:task/*\"\n,\n\n                \n\"arn:aws:sqs:*:*:*\"\n\n            \n]\n\n        \n}\n\n\n\n\n\nFargate service role\n\u00b6\n\n\nThis IAM role - \nECS_MASKOPY\n is the service role that is applied to the Fargate tasks created by maskopy.\n\n\n\n\nAttach the \nAmazonEC2ContainerServiceRole\n AWS managed policy to this role to allow access to ECS and Fargate resources.\n\n\nBelow is the custom policy that needs to be applied to the Fargate service role in order to access to ECR, S3, logs and RDS.\n\n\n\n\nAccess to ECR needed to pull the docker images from ECR. Access to S3 is needed to pull the obfuscation scripts from S3.\nAccess to RDS is required to access and update RDS instances during the obfuscation process.\n\n\nReplace \\\n with staging account number. Replace \\\n with the RDS Default KMS KeyID\n\n\n{\n\n    \n\"Version\"\n:\n \n\"2012-10-17\"\n,\n\n    \n\"Statement\"\n:\n \n[\n\n        \n{\n\n            \n\"Effect\"\n:\n \n\"Allow\"\n,\n\n            \n\"Action\"\n:\n \n[\n\n                \n\"ecr:GetDownloadUrlForLayer\"\n,\n\n                \n\"ecr:BatchGetImage\"\n,\n\n                \n\"ecr:DescribeImages\"\n,\n\n                \n\"s3:Get*\"\n,\n\n                \n\"ecr:GetAuthorizationToken\"\n,\n\n                \n\"ecr:DescribeRepositories\"\n,\n\n                \n\"ecr:ListTagsForResource\"\n,\n\n                \n\"ecr:ListImages\"\n,\n\n                \n\"s3:List*\"\n,\n\n                \n\"ecr:GetRepositoryPolicy\"\n\n            \n],\n\n            \n\"Resource\"\n:\n \n\"*\"\n\n        \n},\n\n        \n{\n\n            \n\"Effect\"\n:\n \n\"Allow\"\n,\n\n            \n\"Action\"\n:\n \n[\n\n                \n\"logs:CreateLogStream\"\n,\n\n                \n\"logs:PutLogEvents\"\n\n            \n],\n\n            \n\"Resource\"\n:\n \n\"arn:aws:logs:*:*:*\"\n\n        \n},\n\n        \n{\n\n            \n\"Sid\"\n:\n \n\"RDSPolicy\"\n,\n\n            \n\"Effect\"\n:\n \n\"Allow\"\n,\n\n            \n\"Action\"\n:\n \n[\n\n                \n\"rds:DescribeDBSnapshots\"\n,\n\n                \n\"rds:CopyDBSnapshot\"\n,\n\n                \n\"rds:DescribeDBInstances\"\n,\n\n                \n\"rds:ModifyDBInstance\"\n,\n\n                \n\"rds:ModifyDBSnapshotAttribute\"\n\n            \n],\n\n            \n\"Resource\"\n:\n \n\"arn:aws:rds:*:*:*:maskopy*\"\n\n        \n},\n\n        \n{\n\n            \n\"Sid\"\n:\n \n\"KMSPolicy\"\n,\n\n            \n\"Effect\"\n:\n \n\"Allow\"\n,\n\n            \n\"Action\"\n:\n \n[\n\n                \n\"kms:EnableKey\"\n,\n\n                \n\"kms:Decrypt\"\n,\n\n                \n\"kms:ReEncryptFrom\"\n,\n\n                \n\"kms:ReEncrypt*\"\n,\n\n                \n\"kms:GenerateDataKey*\"\n,\n\n                \n\"kms:ListKeys\"\n,\n\n                \n\"kms:Encrypt\"\n,\n\n                \n\"kms:ReEncryptTo\"\n,\n\n                \n\"kms:DescribeKey\"\n,\n\n                \n\"kms:CreateGrant\"\n\n            \n],\n\n            \n\"Resource\"\n:\n \n\"arn:aws:kms:us-east-1:<STAGING-ACCOUNT>:key/<RDS-DEFAULTKMSKeyID>\"\n\n        \n}\n\n    \n]\n\n\n}\n\n\n\n\n\nTrust Relationship\n\u00b6\n\n\nSource Account\n\u00b6\n\n\nTrust Relationship for Cross Account Role in Source Account\n\u00b6\n\n\nXACNT_MASKOPY role needs to have the trust relationship with the Maskopy's Lambda role that is running in the Staging account. Maskopy's execution role (Lambda) assumes this Cross account role created above to access resources in the source account.\nHere is the trust relationship policy.\n\n\nReplace \\\n with staging account number. Replace \\\n with source account number.\n\n\n{\n\n  \n\"Version\"\n:\n \n\"2012-10-17\"\n,\n\n  \n\"Statement\"\n:\n \n[\n\n    \n{\n\n      \n\"Effect\"\n:\n \n\"Allow\"\n,\n\n      \n\"Principal\"\n:\n \n{\n\n        \n\"AWS\"\n:\n \n\"arn:aws:iam::<STAGING-ACCOUNT>:role/LAMBDA_MASKOPY\"\n\n      \n},\n\n      \n\"Action\"\n:\n \n\"sts:AssumeRole\"\n\n    \n}\n\n  \n]\n\n\n}\n\n\n\n\n\nTrust Relationship for Lambda role\n\u00b6\n\n\nTrust relationship for the Lambda and step function role (LAMBDA_MASKOPY) needs to allow access to \nstates\n, \nevents\n, \nlambda\n, \nsts\n services\n\n\n{\n\n     \n\"Version\"\n:\n \n\"2012-10-17\"\n,\n\n     \n\"Statement\"\n:\n \n[\n\n       \n{\n\n         \n\"Sid\"\n:\n \n\"\"\n,\n\n         \n\"Effect\"\n:\n \n\"Allow\"\n,\n\n         \n\"Principal\"\n:\n \n{\n\n           \n\"Service\"\n:\n \n[\n\n             \n\"lambda.amazonaws.com\"\n,\n\n             \n\"states.us-east-1.amazonaws.com\"\n,\n\n             \n\"states.us-east-2.amazonaws.com\"\n,\n\n             \n\"states.us-west-1.amazonaws.com\"\n,\n\n             \n\"sts.amazonaws.com\"\n,\n\n             \n\"states.us-west-2.amazonaws.com\"\n,\n\n             \n\"states.amazonaws.com\"\n,\n\n             \n\"events.amazonaws.com\"\n\n           \n]\n\n         \n},\n\n         \n\"Action\"\n:\n \n\"sts:AssumeRole\"\n\n       \n}\n\n     \n]\n\n\n}\n\n\n\n\n\nTrust Relationship for ECS Service role\n\u00b6\n\n\nApply this trust relationship for ECS_MASKOPY role.\n\n{\n\n  \n\"Version\"\n:\n \n\"2012-10-17\"\n,\n\n  \n\"Statement\"\n:\n \n[\n\n    \n{\n\n      \n\"Effect\"\n:\n \n\"Allow\"\n,\n\n      \n\"Principal\"\n:\n \n{\n\n        \n\"Service\"\n:\n \n\"ec2.amazonaws.com\"\n\n      \n},\n\n      \n\"Action\"\n:\n \n\"sts:AssumeRole\"\n\n    \n}\n\n  \n]\n\n\n}\n\n\n\n\nDestination Account\n\u00b6\n\n\nIn the current release of Maskopy, the destination account and Staging account is the same.  In upcoming releases, maskopy will run in staging account and share snapshots to the destination account. It requires IAM role updates and a minor enhancement to the orchestration.\n\n\nMaskopy Invoker Role\n\u00b6\n\n\nEach Application onboarding to Maskopy should create an IAM role that allows access to invoke and use Maskopy solution. Add the \nApplication_Name\n in the IAM role.\nEach application leveraging Maskopy will be using the Invoker IAM role to authorize itself. Maskopy checks that the caller IAM role name contains the application name. So, if Application, FooBar wants to use Maskopy, it would require an IAM role named Foobar_invoker or Maskopy_Foobar to be able to invoke Maskopy.\n\n\nSee below the policy that is required for the Maskopy Invoker Role.\n\n\nReplace \\\n with staging account number.\n\n\n{\n\n    \n\"Version\"\n:\n \n\"2012-10-17\"\n,\n\n    \n\"Statement\"\n:\n \n[\n\n        \n{\n\n            \n\"Sid\"\n:\n \n\"MaskopyPolicy\"\n,\n\n            \n\"Effect\"\n:\n \n\"Allow\"\n,\n\n            \n\"Action\"\n:\n \n\"states:StartExecution\"\n,\n\n            \n\"Resource\"\n:\n \n[\n\n                \n\"arn:aws:states:*:<ACCOUNT>:stateMachine:maskopy*\"\n,\n\n                \n\"arn:aws:states:*:<ACCOUNT>:stateMachine:MASKOPY*\"\n\n            \n]\n\n        \n}\n\n    \n]\n\n\n}",
            "title": "AWS IAM Role Setup"
        },
        {
            "location": "/iam-roles/#aws-iam-roles-setup",
            "text": "AWS IAM role is required to run the Maskopy solution's Step functions, Lambda and Fargate tasks. Since Maskopy needs to access resources like RDS snapshots from a source account that is different than its current account, it needs Cross account access.\nWe will look at how to setup these IAM roles in the source and staging accounts.\nMake a note of the account IDs for Source and staging accounts since they will be used in the IAM roles.",
            "title": "AWS IAM Roles Setup"
        },
        {
            "location": "/iam-roles/#iam-roles",
            "text": "",
            "title": "IAM Roles"
        },
        {
            "location": "/iam-roles/#source-account",
            "text": "Create the Cross-Account role,  XACNT_MASKOPY  in the  Source Account  to share and copy snapshots from Source Account to Staging Account. The purpose of this role is to copy RDS snapshots to share with the staging account. It also require delete permissions on RDS snapshots to cleanup the transient snapshot copies that were made during the maskopy execution. The delete permission is limited to only RDS snapshots with the prefix  maskopy . This ensures that this role allows maskopy to delete only the snapshots that are created by maskopy.  Replace \\  with staging account number. Replace \\  with source account number.",
            "title": "Source Account"
        },
        {
            "location": "/iam-roles/#iam-role",
            "text": "{ \n        \"Version\" :   \"2012-10-17\" , \n        \"Statement\" :   [ \n            { \n                \"Sid\" :   \"KMSandLogs\" , \n                \"Effect\" :   \"Allow\" , \n                \"Action\" :   [ \n                    \"logs:CreateLogStream\" , \n                    \"kms:List*\" , \n                    \"kms:Get*\" , \n                    \"kms:CreateAlias\" , \n                    \"kms:Describe*\" , \n                    \"kms:CreateKey\" , \n                    \"kms:CreateGrant\" , \n                    \"logs:CreateLogGroup\" , \n                    \"logs:PutLogEvents\" , \n                    \"kms:ReEncrypt*\" \n                ], \n                \"Resource\" :   \"*\" \n            }, \n            { \n                \"Sid\" :   \"RDSSnapshotPolicy\" , \n                \"Effect\" :   \"Allow\" , \n                \"Action\" :   [ \n                    \"rds:ListTagsForResource\" , \n                    \"rds:DescribeDBSnapshots\" , \n                    \"rds:CopyDBSnapshot\" , \n                    \"rds:ModifyDBSnapshotAttribute\" \n                ], \n                \"Resource\" :   \"arn:aws:rds:*:<SOURCE-ACCOUNT>:*:*\" \n            }, \n            { \n                \"Sid\" :   \"RDSDeletePolicy\" , \n                \"Effect\" :   \"Allow\" , \n                \"Action\" :   [ \n                    \"rds:DeleteDBSnapshot\" \n                ], \n                \"Resource\" :   \"arn:aws:rds:*:<SOURCE-ACCOUNT>:*:maskopy*\" \n            } \n        ] \n  }",
            "title": "IAM role"
        },
        {
            "location": "/iam-roles/#staging-account",
            "text": "",
            "title": "Staging account"
        },
        {
            "location": "/iam-roles/#lambda-and-step-function-role",
            "text": "Create an IAM role -  LAMBDA_MASKOPY  for Maskopy's Lambda and Step function. This role will be created in the staging account.  Add below AWS Managed policy for Lambda\n -  AWSLambdaExecute \n -  AWSLambdaRole \n - Below is a custom policy that is required to access other services such as ECS/Fargate, KMS, RDS.  Replace \\  with staging account number. Replace \\  with source account number.  { \n  \"Version\" :   \"2012-10-17\" , \n     \"Statement\" :   [ \n         { \n             \"Sid\" :   \"MultiplePolicy\" , \n             \"Effect\" :   \"Allow\" , \n             \"Action\" :   [ \n                 \"events:Put*\" , \n                 \"events:DescribeRule\" , \n                 \"rds:DescribeDBSnapshots\" , \n                 \"ecs:CreateCluster\" , \n                 \"ec2:DeleteNetworkInterface\" , \n                 \"rds:DescribeDBParameterGroups\" , \n                 \"s3:ListBucket\" , \n                 \"ecs:DeregisterTaskDefinition\" , \n                 \"ec2:CreateNetworkInterface\" , \n                 \"ec2:DescribeNetworkInterfaces\" , \n                 \"ecs:RegisterTaskDefinition\" , \n                 \"rds:DescribeDBInstances\" , \n                 \"rds:DescribeOptionGroups\" , \n                 \"rds:AddTagsToResource\" \n             ], \n             \"Resource\" :   \"*\" \n         }, \n         { \n             \"Sid\" :   \"RDSPolicy\" , \n             \"Effect\" :   \"Allow\" , \n             \"Action\" :   [ \n                 \"rds:CreateDBSnapshot\" , \n                 \"rds:RestoreDBInstanceFromDBSnapshot\" \n             ], \n             \"Resource\" :   [ \n                 \"arn:aws:rds:*:*:*:*maskopy*\" , \n                 \"arn:aws:rds:*:*:*:default*\" \n             ] \n         }, \n         { \n             \"Sid\" :   \"PassRolePolicy\" , \n             \"Effect\" :   \"Allow\" , \n             \"Action\" :   \"iam:PassRole\" , \n             \"Resource\" :   \"arn:aws:iam::<STAGING-ACCOUNT>:role/*MASKOPY*\" \n         }, \n         { \n             \"Sid\" :   \"RDSMaskopyPolicy\" , \n             \"Effect\" :   \"Allow\" , \n             \"Action\" :   \"rds:*\" , \n             \"Resource\" :   [ \n                 \"arn:aws:rds:*:*:db:maskopy*\" , \n                 \"arn:aws:rds:*:*:snapshot:*maskopy*\" \n             ] \n         } \n     ]  }",
            "title": "Lambda and Step function role"
        },
        {
            "location": "/iam-roles/#updates-to-lambda-role-after-kms-keys-are-created",
            "text": "Skip this step if you have not created KMS Keys in Source account. KMS keys creation is described here.\nOnce the KMS keys are created in the Source account, Note the KMS Key ID. It needs to be replaced in the below Policy.\nAlso replace Source account, staging account, Staging-DefaultRDSKMSKeyID.  Update the LAMBDA_MASKOPY IAM role and modify with below policy.  Replace \\  with staging account number. Replace \\  with source account number.           { \n             \"Sid\" :   \"KMSPolicy\" , \n             \"Effect\" :   \"Allow\" , \n             \"Action\" :   [ \n                 \"kms:RevokeGrant\" , \n                 \"kms:CreateGrant\" , \n                 \"kms:ListGrants\" \n             ], \n             \"Resource\" :   [ \n                 \"arn:aws:kms:us-east-1:<STAGING-ACCOUNT>:key/<STAGING-DefaultRDSKMSKey>\" , \n                 \"arn:aws:kms:us-east-1:<SOURCE-ACCOUNT>:key/<SOURCE-KMSKeyID>\" \n             ], \n             \"Condition\" :   { \n                 \"Bool\" :   { \n                     \"kms:GrantIsForAWSResource\" :   \"true\" \n                 } \n             } \n         } , \n          { \n             \"Sid\" :   \"MaskopyLambdaPolicy\" , \n             \"Effect\" :   \"Allow\" , \n             \"Action\" :   [ \n                 \"sts:AssumeRole\" , \n                 \"kms:Decrypt\" , \n                 \"ecs:RunTask\" , \n                 \"kms:Encrypt\" , \n                 \"sqs:SendMessage\" , \n                 \"kms:DescribeKey\" , \n                 \"ecs:StartTask\" , \n                 \"ecs:DeleteCluster\" , \n                 \"kms:RetireGrant\" , \n                 \"ecs:DescribeTasks\" , \n                 \"ecs:DescribeClusters\" \n             ], \n             \"Resource\" :   [ \n                 \"arn:aws:iam::*:role/Xacnt_MASKOPY\" , \n                 \"arn:aws:kms:us-east-1:<STAGING-ACCOUNT>:key/<STAGING-DefaultRDSKMSKey>\" , \n                 \"arn:aws:kms:us-east-1:<SOURCE-ACCOUNT>:key/<SOURCE-KMSKeyID>\" , \n                 \"arn:aws:ecs:*:<STAGING-ACCOUNT>:task-definition/*:*\" , \n                 \"arn:aws:ecs:*:<STAGING-ACCOUNT>:cluster/*\" , \n                 \"arn:aws:ecs:*:<STAGING-ACCOUNT>:task/*\" , \n                 \"arn:aws:sqs:*:*:*\" \n             ] \n         }",
            "title": "Updates to Lambda Role after KMS Keys are created"
        },
        {
            "location": "/iam-roles/#fargate-service-role",
            "text": "This IAM role -  ECS_MASKOPY  is the service role that is applied to the Fargate tasks created by maskopy.   Attach the  AmazonEC2ContainerServiceRole  AWS managed policy to this role to allow access to ECS and Fargate resources.  Below is the custom policy that needs to be applied to the Fargate service role in order to access to ECR, S3, logs and RDS.   Access to ECR needed to pull the docker images from ECR. Access to S3 is needed to pull the obfuscation scripts from S3.\nAccess to RDS is required to access and update RDS instances during the obfuscation process.  Replace \\  with staging account number. Replace \\  with the RDS Default KMS KeyID  { \n     \"Version\" :   \"2012-10-17\" , \n     \"Statement\" :   [ \n         { \n             \"Effect\" :   \"Allow\" , \n             \"Action\" :   [ \n                 \"ecr:GetDownloadUrlForLayer\" , \n                 \"ecr:BatchGetImage\" , \n                 \"ecr:DescribeImages\" , \n                 \"s3:Get*\" , \n                 \"ecr:GetAuthorizationToken\" , \n                 \"ecr:DescribeRepositories\" , \n                 \"ecr:ListTagsForResource\" , \n                 \"ecr:ListImages\" , \n                 \"s3:List*\" , \n                 \"ecr:GetRepositoryPolicy\" \n             ], \n             \"Resource\" :   \"*\" \n         }, \n         { \n             \"Effect\" :   \"Allow\" , \n             \"Action\" :   [ \n                 \"logs:CreateLogStream\" , \n                 \"logs:PutLogEvents\" \n             ], \n             \"Resource\" :   \"arn:aws:logs:*:*:*\" \n         }, \n         { \n             \"Sid\" :   \"RDSPolicy\" , \n             \"Effect\" :   \"Allow\" , \n             \"Action\" :   [ \n                 \"rds:DescribeDBSnapshots\" , \n                 \"rds:CopyDBSnapshot\" , \n                 \"rds:DescribeDBInstances\" , \n                 \"rds:ModifyDBInstance\" , \n                 \"rds:ModifyDBSnapshotAttribute\" \n             ], \n             \"Resource\" :   \"arn:aws:rds:*:*:*:maskopy*\" \n         }, \n         { \n             \"Sid\" :   \"KMSPolicy\" , \n             \"Effect\" :   \"Allow\" , \n             \"Action\" :   [ \n                 \"kms:EnableKey\" , \n                 \"kms:Decrypt\" , \n                 \"kms:ReEncryptFrom\" , \n                 \"kms:ReEncrypt*\" , \n                 \"kms:GenerateDataKey*\" , \n                 \"kms:ListKeys\" , \n                 \"kms:Encrypt\" , \n                 \"kms:ReEncryptTo\" , \n                 \"kms:DescribeKey\" , \n                 \"kms:CreateGrant\" \n             ], \n             \"Resource\" :   \"arn:aws:kms:us-east-1:<STAGING-ACCOUNT>:key/<RDS-DEFAULTKMSKeyID>\" \n         } \n     ]  }",
            "title": "Fargate service role"
        },
        {
            "location": "/iam-roles/#trust-relationship",
            "text": "",
            "title": "Trust Relationship"
        },
        {
            "location": "/iam-roles/#source-account_1",
            "text": "",
            "title": "Source Account"
        },
        {
            "location": "/iam-roles/#trust-relationship-for-cross-account-role-in-source-account",
            "text": "XACNT_MASKOPY role needs to have the trust relationship with the Maskopy's Lambda role that is running in the Staging account. Maskopy's execution role (Lambda) assumes this Cross account role created above to access resources in the source account.\nHere is the trust relationship policy.  Replace \\  with staging account number. Replace \\  with source account number.  { \n   \"Version\" :   \"2012-10-17\" , \n   \"Statement\" :   [ \n     { \n       \"Effect\" :   \"Allow\" , \n       \"Principal\" :   { \n         \"AWS\" :   \"arn:aws:iam::<STAGING-ACCOUNT>:role/LAMBDA_MASKOPY\" \n       }, \n       \"Action\" :   \"sts:AssumeRole\" \n     } \n   ]  }",
            "title": "Trust Relationship for Cross Account Role in Source Account"
        },
        {
            "location": "/iam-roles/#trust-relationship-for-lambda-role",
            "text": "Trust relationship for the Lambda and step function role (LAMBDA_MASKOPY) needs to allow access to  states ,  events ,  lambda ,  sts  services  { \n      \"Version\" :   \"2012-10-17\" , \n      \"Statement\" :   [ \n        { \n          \"Sid\" :   \"\" , \n          \"Effect\" :   \"Allow\" , \n          \"Principal\" :   { \n            \"Service\" :   [ \n              \"lambda.amazonaws.com\" , \n              \"states.us-east-1.amazonaws.com\" , \n              \"states.us-east-2.amazonaws.com\" , \n              \"states.us-west-1.amazonaws.com\" , \n              \"sts.amazonaws.com\" , \n              \"states.us-west-2.amazonaws.com\" , \n              \"states.amazonaws.com\" , \n              \"events.amazonaws.com\" \n            ] \n          }, \n          \"Action\" :   \"sts:AssumeRole\" \n        } \n      ]  }",
            "title": "Trust Relationship for Lambda role"
        },
        {
            "location": "/iam-roles/#trust-relationship-for-ecs-service-role",
            "text": "Apply this trust relationship for ECS_MASKOPY role. { \n   \"Version\" :   \"2012-10-17\" , \n   \"Statement\" :   [ \n     { \n       \"Effect\" :   \"Allow\" , \n       \"Principal\" :   { \n         \"Service\" :   \"ec2.amazonaws.com\" \n       }, \n       \"Action\" :   \"sts:AssumeRole\" \n     } \n   ]  }",
            "title": "Trust Relationship for ECS Service role"
        },
        {
            "location": "/iam-roles/#destination-account",
            "text": "In the current release of Maskopy, the destination account and Staging account is the same.  In upcoming releases, maskopy will run in staging account and share snapshots to the destination account. It requires IAM role updates and a minor enhancement to the orchestration.",
            "title": "Destination Account"
        },
        {
            "location": "/iam-roles/#maskopy-invoker-role",
            "text": "Each Application onboarding to Maskopy should create an IAM role that allows access to invoke and use Maskopy solution. Add the  Application_Name  in the IAM role.\nEach application leveraging Maskopy will be using the Invoker IAM role to authorize itself. Maskopy checks that the caller IAM role name contains the application name. So, if Application, FooBar wants to use Maskopy, it would require an IAM role named Foobar_invoker or Maskopy_Foobar to be able to invoke Maskopy.  See below the policy that is required for the Maskopy Invoker Role.  Replace \\  with staging account number.  { \n     \"Version\" :   \"2012-10-17\" , \n     \"Statement\" :   [ \n         { \n             \"Sid\" :   \"MaskopyPolicy\" , \n             \"Effect\" :   \"Allow\" , \n             \"Action\" :   \"states:StartExecution\" , \n             \"Resource\" :   [ \n                 \"arn:aws:states:*:<ACCOUNT>:stateMachine:maskopy*\" , \n                 \"arn:aws:states:*:<ACCOUNT>:stateMachine:MASKOPY*\" \n             ] \n         } \n     ]  }",
            "title": "Maskopy Invoker Role"
        },
        {
            "location": "/configurations/",
            "text": "Configurations\n\u00b6\n\n\nInput Options:\n\u00b6\n\n\nThe following table shows the full list of possible inputs. There's a brief description of the usage of the input and if the input is a requirement.\n\n\n\n\n\n\n\n\nInputs\n\n\nDescription\n\n\nRequired?\n\n\n\n\n\n\n\n\n\n\nApplicationName\n\n\nName of the application running the MasKopy process\n\n\nYes\n\n\n\n\n\n\nCostCenter\n\n\nCost center of the application running the MasKopy process\n\n\nYes\n\n\n\n\n\n\nRdsSnapshotIdentifier\n\n\nSnapshot ID of the snapshot that will be used\n\n\nYes\n\n\n\n\n\n\nExecutionTimestamp\n\n\nBuild timestamp to identify the step function resources\n\n\nNo\n\n\n\n\n\n\nPresignedUrl\n\n\nURL generated by caller to authorize caller. If running manually, you can generate the presigned URL in python:\nURL=$(python -c \"import boto3; print boto3.client('sts').generate_presigned_url('get_caller_identity')\")\n\n\nYes\n\n\n\n\n\n\nDestinationEnv\n\n\nDestination environment\n\n\nYes\n\n\n\n\n\n\nObfuscationScriptPath\n\n\nS3 location of bootstrap script and application provided obfuscation script\n\n\nYes\n\n\n\n\n\n\nObfuscateRunMode\n\n\nCurrently supported values: fargate (default), ecs, none\n\n\nNo\n\n\n\n\n\n\nRdsFinalSnapshotIdentifier\n\n\nFinal obfuscated snapshot name. It should start with lower case ApplicationName. If not provided, will take default value. \nConstraints:\nMust contain from 1 to 255 letters, numbers, or hyphens\nCan't include underscores and can't end with a hyphen or contain two consecutive hyphens\n.\n\n\nNo. The default value will be \nApplicationName-db_name-timestamp.\n\n\n\n\n\n\nRdsInstanceType\n\n\nDB Instance class\n\n\nNo\n\n\n\n\n\n\nAmiId\n\n\nAMI id to be used for the obfuscation ecs\n\n\nNo, required in ecs mode.\n\n\n\n\n\n\nRdsParameterGroup\n\n\nName of an existing DB Parameter group in destination environment to be used for the final snapshot\n\n\nNo, if not set MasKopy will try to find an existing parameter group in destination environment with the same name as the original.\n\n\n\n\n\n\nRdsOptionGroup\n\n\nName of an existing option group in destination environment to be used for the final snapshots\n\n\nNo, required if snapshot is oracle engine\n\n\n\n\n\n\n\n\nOutput Options:\n\u00b6\n\n\nThe following table shows the full list of possible outputs. There's a brief description of each output.\n\n\n\n\n\n\n\n\nOutputs\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nCreatedSnapshots\n\n\nList of created snapshots\n\n\n\n\n\n\nCreatedSnapshots[].SnapshotName\n\n\nName of created snapshot copy in source environment\n\n\n\n\n\n\nCreatedSnapshots[].SnapshotARN\n\n\nARN of created snapshot copy in source environment\n\n\n\n\n\n\nCreatedSnapshots[].InstanceIdentifier\n\n\nName of original RDS of snapshot\n\n\n\n\n\n\nCreatedSnapshots[].Tags\n\n\nList of tags added to created snapshot\n\n\n\n\n\n\nCreatedSnapshots[].RdsParameterGroup\n\n\nRDS Parameter Group to be used in RDS instance\n\n\n\n\n\n\nSnapshotsAvailable\n\n\nBoolean used to check the availability state of created snapshot\n\n\n\n\n\n\nSharedSnapshots\n\n\nBoolean used to check if created snapshot was shared to target environment\n\n\n\n\n\n\nCreatedDestinationSnapshots[].SnapshotName\n\n\nName of created snapshot copy in target environment\n\n\n\n\n\n\nCreatedDestinationSnapshots[].SnapshotARN\n\n\nARN of created snapshot copy in target environment\n\n\n\n\n\n\nCreatedDestinationSnapshots[].InstanceIdentifier\n\n\nName of original RDS of snapshot\n\n\n\n\n\n\nCreatedDestinationSnapshots[].Tags\n\n\nList of tags added to created snapshot\n\n\n\n\n\n\nDestinationSnapshotsAvailable\n\n\nBoolean used to check the availability state of created target snapshot\n\n\n\n\n\n\nDestinationRestoredDatabases\n\n\nName of temporary RDS instance in target environment\n\n\n\n\n\n\nDestinationRestoredDatabasesComplete\n\n\nBoolean used to check the availability state of created snapshot\n\n\n\n\n\n\nfargate\n\n\nObject that contains name of fargate cluster and task definition\n\n\n\n\n\n\nECSRunTask\n\n\nOutput of completed task\n\n\n\n\n\n\nCreatedFinalSnapshots\n\n\nList of created final snapshots in source environment\n\n\n\n\n\n\nFinalSnapshotAvailable\n\n\nBoolean used to check the availability state of created final snapshot\n\n\n\n\n\n\nCleanupAndTagging\n\n\nObject that contains cleanup step status and message to be sent by SQS\n\n\n\n\n\n\nPublish\n\n\nOutput of completed SQS task\n\n\n\n\n\n\n\n\nExceptions:\n\u00b6\n\n\nThe following tables shows the full list of possible exceptions thrown by MasKopy.\n\n\n\n\n\n\n\n\nExceptions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMaskopyAccessException\n\n\nException raised when IAM role or user is not able to access the resource due to authorization error.\n\n\n\n\n\n\nMaskopyDBInstanceStatusException\n\n\nException raised when RDS is not in an available state.\n\n\n\n\n\n\nMaskopyHTTPException\n\n\nException raised when HTTP request returns a 4xx or 5xx error.\n\n\n\n\n\n\nMaskopyResourceException\n\n\nException raised when IAM role or user is not able to access the resource.\n\n\n\n\n\n\nMaskopyResourceNotFoundException\n\n\nException raised when IAM role or user is not able to access the resource since the resource does not exist.\n\n\n\n\n\n\nMaskopyTimeoutException\n\n\nException raised when HTTP request times out.\n\n\n\n\n\n\nMaskopyThrottlingException\n\n\nException raised when AWS request returns a Throttling exception.\n\n\n\n\n\n\n\n\nJSON\n\u00b6\n\n\n{\n\n    \n\"CreatedSnapshots\"\n:\n \n[\n\n        \n{\n\n            \n\"SnapshotName\"\n:\n \n\"string\"\n,\n\n            \n\"SnapshotARN\"\n:\n \n\"string\"\n,\n\n            \n\"InstanceIdentifier\"\n:\n \n\"string\"\n,\n\n            \n\"Tags\"\n:\n \n[\n\n                \n{\n\n                    \n\"Key\"\n:\n \n\"ApplicationName\"\n,\n\n                    \n\"Value\"\n:\n \n\"MASKOPY\"\n\n                \n},\n\n                \n{\n\n                    \n\"Key\"\n:\n \n\"Cost Center\"\n,\n\n                    \n\"Value\"\n:\n \n\"string\"\n\n                \n}\n\n            \n],\n\n            \n\"RdsParameterGroup\"\n:\n \n\"string\"\n\n        \n}\n\n    \n],\n\n    \n\"SnapshotsAvailable\"\n:\n \ntrue\n|\nfalse\n,\n\n    \n\"SharedSnapshots\"\n:\n \ntrue\n|\nfalse\n,\n\n    \n\"CreatedDestinationSnapshots\"\n:\n \n[\n\n        \n{\n\n            \n\"SnapshotName\"\n:\n \n\"string\"\n,\n\n            \n\"InstanceIdentifier\"\n:\n \n\"string\"\n,\n\n            \n\"SnapshotARN\"\n:\n \n\"string\"\n,\n\n            \n\"SnapshotTags\"\n:\n \n[\n\n                \n{\n\n                  \n\"Key\"\n:\n \n\"ApplicationName\"\n,\n\n                  \n\"Value\"\n:\n \n\"MASKOPY\"\n\n                \n},\n\n                \n{\n\n                  \n\"Key\"\n:\n \n\"Cost Center\"\n,\n\n                  \n\"Value\"\n:\n \n\"string\"\n\n                \n}\n\n            \n]\n\n        \n}\n\n    \n],\n\n    \n\"DestinationSnapshotsAvailable\"\n:\n \ntrue\n|\nfalse\n,\n\n    \n\"DestinationRestoredDatabases\"\n:\n \n[\n\n        \n\"string\"\n\n    \n],\n\n    \n\"DestinationRestoredDatabasesComplete\"\n:\n \ntrue\n|\nfalse\n,\n\n    \n\"fargate\"\n:\n \n{\n\n        \n\"ClusterName\"\n:\n \n\"MASKOPY-FARGATE-CLUSTER\"\n,\n\n        \n\"TaskDefinition\"\n:\n \n\"string\"\n\n    \n},\n\n    \n\"ECSRunTask\"\n:\n \n{\n\n        \n\"Attachments\"\n:\n \n[\n\n            \n{\n\n                \n\"Details\"\n:\n \n[\n\n                    \n{\n\n                        \n\"Name\"\n:\n \n\"subnetId\"\n,\n\n                        \n\"Value\"\n:\n \n\"string\"\n\n                    \n},\n\n                    \n{\n\n                        \n\"Name\"\n:\n \n\"networkInterfaceId\"\n,\n\n                        \n\"Value\"\n:\n \n\"string\"\n\n                    \n},\n\n                    \n{\n\n                        \n\"Name\"\n:\n \n\"macAddress\"\n,\n\n                        \n\"Value\"\n:\n \n\"string\"\n\n                    \n},\n\n                    \n{\n\n                        \n\"Name\"\n:\n \n\"privateIPv4Address\"\n,\n\n                        \n\"Value\"\n:\n \n\"string\"\n\n                    \n}\n\n                \n],\n\n                \n\"Id\"\n:\n \n\"string\"\n,\n\n                \n\"Status\"\n:\n \n\"string\"\n,\n\n                \n\"Type\"\n:\n \n\"eni\"\n\n            \n}\n\n        \n],\n\n        \n\"ClusterArn\"\n:\n \n\"string\"\n,\n\n        \n\"Connectivity\"\n:\n \n\"string\"\n,\n\n        \n\"ConnectivityAt\"\n:\n \n123\n,\n\n        \n\"Containers\"\n:\n \n[\n\n            \n{\n\n                \n\"ContainerArn\"\n:\n \n\"string\"\n,\n\n                \n\"Cpu\"\n:\n \n\"string\"\n,\n\n                \n\"ExitCode\"\n:\n \n123\n,\n\n                \n\"GpuIds\"\n:\n \n[],\n\n                \n\"Image\"\n:\n \n\"string\"\n,\n\n                \n\"ImageDigest\"\n:\n \n\"string\"\n,\n\n                \n\"LastStatus\"\n:\n \n\"string\"\n,\n\n                \n\"Memory\"\n:\n \n\"string\"\n,\n\n                \n\"Name\"\n:\n \n\"string\"\n,\n\n                \n\"NetworkBindings\"\n:\n \n[],\n\n                \n\"NetworkInterfaces\"\n:\n \n[\n\n                    \n{\n\n                        \n\"AttachmentId\"\n:\n \n\"string\"\n,\n\n                        \n\"PrivateIpv4Address\"\n:\n \n\"string\"\n\n                    \n}\n\n                \n],\n\n                \n\"RuntimeId\"\n:\n \n\"string\"\n,\n\n                \n\"TaskArn\"\n:\n \n\"string\"\n\n            \n}\n\n        \n],\n\n        \n\"Cpu\"\n:\n \n\"string\"\n,\n\n        \n\"CreatedAt\"\n:\n \n123\n,\n\n        \n\"DesiredStatus\"\n:\n \n\"string\"\n,\n\n        \n\"ExecutionStoppedAt\"\n:\n \n123\n,\n\n        \n\"Group\"\n:\n \n\"string\"\n,\n\n        \n\"InferenceAccelerators\"\n:\n \n[],\n\n        \n\"LastStatus\"\n:\n \n\"string\"\n,\n\n        \n\"LaunchType\"\n:\n \n\"FARGATE\"\n,\n\n        \n\"Memory\"\n:\n \n\"string\"\n,\n\n        \n\"Overrides\"\n:\n \n{\n\n            \n\"ContainerOverrides\"\n:\n \n[\n\n                \n{\n\n                    \n\"Command\"\n:\n \n[],\n\n                    \n\"Environment\"\n:\n \n[],\n\n                    \n\"Name\"\n:\n \n\"string\"\n,\n\n                    \n\"ResourceRequirements\"\n:\n \n[]\n\n                \n}\n\n            \n],\n\n            \n\"InferenceAcceleratorOverrides\"\n:\n \n[]\n\n        \n},\n\n        \n\"PlatformVersion\"\n:\n \n\"string\"\n,\n\n        \n\"PullStartedAt\"\n:\n \n123\n,\n\n        \n\"PullStoppedAt\"\n:\n \n123\n,\n\n        \n\"StartedAt\"\n:\n \n123\n,\n\n        \n\"StartedBy\"\n:\n \n\"string\"\n,\n\n        \n\"StopCode\"\n:\n \n\"string\"\n,\n\n        \n\"StoppedAt\"\n:\n \n123\n,\n\n        \n\"StoppedReason\"\n:\n \n\"string\"\n,\n\n        \n\"StoppingAt\"\n:\n \n123\n,\n\n        \n\"Tags\"\n:\n \n[],\n\n        \n\"TaskArn\"\n:\n \n\"string\"\n,\n\n        \n\"TaskDefinitionArn\"\n:\n \n\"string\"\n,\n\n        \n\"Version\"\n:\n \n123\n\n    \n},\n\n    \n\"CreatedFinalSnapshots\"\n:\n \n[\n\n        \n{\n\n            \n\"SnapshotName\"\n:\n \n\"string\"\n\n        \n}\n\n    \n],\n\n    \n\"FinalSnapshotAvailable\"\n:\n \ntrue\n|\nfalse\n,\n\n    \n\"CleanupAndTagging\"\n:\n \n[\n\n        \n{\n\n            \n\"Success\"\n:\n \ntrue\n|\nfalse\n\n        \n},\n\n        \n{\n\n            \n\"Message\"\n:\n \n\"string\"\n\n        \n}\n\n    \n],\n\n    \n\"Publish\"\n:\n \n{\n\n        \n\"MD5OfMessageBody\"\n:\n \n\"string\"\n,\n\n        \n\"MessageId\"\n:\n \n\"string\"\n,\n\n        \n\"SdkHttpMetadata\"\n:\n \n{\n\n            \n\"HttpHeaders\"\n:\n \n{\n\n                \n\"Content-Length\"\n:\n \n\"string\"\n,\n\n                \n\"Content-Type\"\n:\n \n\"string\"\n,\n\n                \n\"Date\"\n:\n \ndatetime\n(\n2019\n,\n \n1\n,\n \n1\n),\n\n                \n\"x-amzn-RequestId\"\n:\n \n\"string\"\n\n            \n},\n\n            \n\"HttpStatusCode\"\n:\n \n123\n\n        \n},\n\n        \n\"SdkResponseMetadata\"\n:\n \n{\n\n            \n\"RequestId\"\n:\n \n\"string\"\n\n        \n}\n\n    \n}\n\n\n}",
            "title": "Configurations"
        },
        {
            "location": "/configurations/#configurations",
            "text": "",
            "title": "Configurations"
        },
        {
            "location": "/configurations/#input-options",
            "text": "The following table shows the full list of possible inputs. There's a brief description of the usage of the input and if the input is a requirement.     Inputs  Description  Required?      ApplicationName  Name of the application running the MasKopy process  Yes    CostCenter  Cost center of the application running the MasKopy process  Yes    RdsSnapshotIdentifier  Snapshot ID of the snapshot that will be used  Yes    ExecutionTimestamp  Build timestamp to identify the step function resources  No    PresignedUrl  URL generated by caller to authorize caller. If running manually, you can generate the presigned URL in python: URL=$(python -c \"import boto3; print boto3.client('sts').generate_presigned_url('get_caller_identity')\")  Yes    DestinationEnv  Destination environment  Yes    ObfuscationScriptPath  S3 location of bootstrap script and application provided obfuscation script  Yes    ObfuscateRunMode  Currently supported values: fargate (default), ecs, none  No    RdsFinalSnapshotIdentifier  Final obfuscated snapshot name. It should start with lower case ApplicationName. If not provided, will take default value.  Constraints: Must contain from 1 to 255 letters, numbers, or hyphens Can't include underscores and can't end with a hyphen or contain two consecutive hyphens .  No. The default value will be  ApplicationName-db_name-timestamp.    RdsInstanceType  DB Instance class  No    AmiId  AMI id to be used for the obfuscation ecs  No, required in ecs mode.    RdsParameterGroup  Name of an existing DB Parameter group in destination environment to be used for the final snapshot  No, if not set MasKopy will try to find an existing parameter group in destination environment with the same name as the original.    RdsOptionGroup  Name of an existing option group in destination environment to be used for the final snapshots  No, required if snapshot is oracle engine",
            "title": "Input Options:"
        },
        {
            "location": "/configurations/#output-options",
            "text": "The following table shows the full list of possible outputs. There's a brief description of each output.     Outputs  Description      CreatedSnapshots  List of created snapshots    CreatedSnapshots[].SnapshotName  Name of created snapshot copy in source environment    CreatedSnapshots[].SnapshotARN  ARN of created snapshot copy in source environment    CreatedSnapshots[].InstanceIdentifier  Name of original RDS of snapshot    CreatedSnapshots[].Tags  List of tags added to created snapshot    CreatedSnapshots[].RdsParameterGroup  RDS Parameter Group to be used in RDS instance    SnapshotsAvailable  Boolean used to check the availability state of created snapshot    SharedSnapshots  Boolean used to check if created snapshot was shared to target environment    CreatedDestinationSnapshots[].SnapshotName  Name of created snapshot copy in target environment    CreatedDestinationSnapshots[].SnapshotARN  ARN of created snapshot copy in target environment    CreatedDestinationSnapshots[].InstanceIdentifier  Name of original RDS of snapshot    CreatedDestinationSnapshots[].Tags  List of tags added to created snapshot    DestinationSnapshotsAvailable  Boolean used to check the availability state of created target snapshot    DestinationRestoredDatabases  Name of temporary RDS instance in target environment    DestinationRestoredDatabasesComplete  Boolean used to check the availability state of created snapshot    fargate  Object that contains name of fargate cluster and task definition    ECSRunTask  Output of completed task    CreatedFinalSnapshots  List of created final snapshots in source environment    FinalSnapshotAvailable  Boolean used to check the availability state of created final snapshot    CleanupAndTagging  Object that contains cleanup step status and message to be sent by SQS    Publish  Output of completed SQS task",
            "title": "Output Options:"
        },
        {
            "location": "/configurations/#exceptions",
            "text": "The following tables shows the full list of possible exceptions thrown by MasKopy.     Exceptions  Description      MaskopyAccessException  Exception raised when IAM role or user is not able to access the resource due to authorization error.    MaskopyDBInstanceStatusException  Exception raised when RDS is not in an available state.    MaskopyHTTPException  Exception raised when HTTP request returns a 4xx or 5xx error.    MaskopyResourceException  Exception raised when IAM role or user is not able to access the resource.    MaskopyResourceNotFoundException  Exception raised when IAM role or user is not able to access the resource since the resource does not exist.    MaskopyTimeoutException  Exception raised when HTTP request times out.    MaskopyThrottlingException  Exception raised when AWS request returns a Throttling exception.",
            "title": "Exceptions:"
        },
        {
            "location": "/configurations/#json",
            "text": "{ \n     \"CreatedSnapshots\" :   [ \n         { \n             \"SnapshotName\" :   \"string\" , \n             \"SnapshotARN\" :   \"string\" , \n             \"InstanceIdentifier\" :   \"string\" , \n             \"Tags\" :   [ \n                 { \n                     \"Key\" :   \"ApplicationName\" , \n                     \"Value\" :   \"MASKOPY\" \n                 }, \n                 { \n                     \"Key\" :   \"Cost Center\" , \n                     \"Value\" :   \"string\" \n                 } \n             ], \n             \"RdsParameterGroup\" :   \"string\" \n         } \n     ], \n     \"SnapshotsAvailable\" :   true | false , \n     \"SharedSnapshots\" :   true | false , \n     \"CreatedDestinationSnapshots\" :   [ \n         { \n             \"SnapshotName\" :   \"string\" , \n             \"InstanceIdentifier\" :   \"string\" , \n             \"SnapshotARN\" :   \"string\" , \n             \"SnapshotTags\" :   [ \n                 { \n                   \"Key\" :   \"ApplicationName\" , \n                   \"Value\" :   \"MASKOPY\" \n                 }, \n                 { \n                   \"Key\" :   \"Cost Center\" , \n                   \"Value\" :   \"string\" \n                 } \n             ] \n         } \n     ], \n     \"DestinationSnapshotsAvailable\" :   true | false , \n     \"DestinationRestoredDatabases\" :   [ \n         \"string\" \n     ], \n     \"DestinationRestoredDatabasesComplete\" :   true | false , \n     \"fargate\" :   { \n         \"ClusterName\" :   \"MASKOPY-FARGATE-CLUSTER\" , \n         \"TaskDefinition\" :   \"string\" \n     }, \n     \"ECSRunTask\" :   { \n         \"Attachments\" :   [ \n             { \n                 \"Details\" :   [ \n                     { \n                         \"Name\" :   \"subnetId\" , \n                         \"Value\" :   \"string\" \n                     }, \n                     { \n                         \"Name\" :   \"networkInterfaceId\" , \n                         \"Value\" :   \"string\" \n                     }, \n                     { \n                         \"Name\" :   \"macAddress\" , \n                         \"Value\" :   \"string\" \n                     }, \n                     { \n                         \"Name\" :   \"privateIPv4Address\" , \n                         \"Value\" :   \"string\" \n                     } \n                 ], \n                 \"Id\" :   \"string\" , \n                 \"Status\" :   \"string\" , \n                 \"Type\" :   \"eni\" \n             } \n         ], \n         \"ClusterArn\" :   \"string\" , \n         \"Connectivity\" :   \"string\" , \n         \"ConnectivityAt\" :   123 , \n         \"Containers\" :   [ \n             { \n                 \"ContainerArn\" :   \"string\" , \n                 \"Cpu\" :   \"string\" , \n                 \"ExitCode\" :   123 , \n                 \"GpuIds\" :   [], \n                 \"Image\" :   \"string\" , \n                 \"ImageDigest\" :   \"string\" , \n                 \"LastStatus\" :   \"string\" , \n                 \"Memory\" :   \"string\" , \n                 \"Name\" :   \"string\" , \n                 \"NetworkBindings\" :   [], \n                 \"NetworkInterfaces\" :   [ \n                     { \n                         \"AttachmentId\" :   \"string\" , \n                         \"PrivateIpv4Address\" :   \"string\" \n                     } \n                 ], \n                 \"RuntimeId\" :   \"string\" , \n                 \"TaskArn\" :   \"string\" \n             } \n         ], \n         \"Cpu\" :   \"string\" , \n         \"CreatedAt\" :   123 , \n         \"DesiredStatus\" :   \"string\" , \n         \"ExecutionStoppedAt\" :   123 , \n         \"Group\" :   \"string\" , \n         \"InferenceAccelerators\" :   [], \n         \"LastStatus\" :   \"string\" , \n         \"LaunchType\" :   \"FARGATE\" , \n         \"Memory\" :   \"string\" , \n         \"Overrides\" :   { \n             \"ContainerOverrides\" :   [ \n                 { \n                     \"Command\" :   [], \n                     \"Environment\" :   [], \n                     \"Name\" :   \"string\" , \n                     \"ResourceRequirements\" :   [] \n                 } \n             ], \n             \"InferenceAcceleratorOverrides\" :   [] \n         }, \n         \"PlatformVersion\" :   \"string\" , \n         \"PullStartedAt\" :   123 , \n         \"PullStoppedAt\" :   123 , \n         \"StartedAt\" :   123 , \n         \"StartedBy\" :   \"string\" , \n         \"StopCode\" :   \"string\" , \n         \"StoppedAt\" :   123 , \n         \"StoppedReason\" :   \"string\" , \n         \"StoppingAt\" :   123 , \n         \"Tags\" :   [], \n         \"TaskArn\" :   \"string\" , \n         \"TaskDefinitionArn\" :   \"string\" , \n         \"Version\" :   123 \n     }, \n     \"CreatedFinalSnapshots\" :   [ \n         { \n             \"SnapshotName\" :   \"string\" \n         } \n     ], \n     \"FinalSnapshotAvailable\" :   true | false , \n     \"CleanupAndTagging\" :   [ \n         { \n             \"Success\" :   true | false \n         }, \n         { \n             \"Message\" :   \"string\" \n         } \n     ], \n     \"Publish\" :   { \n         \"MD5OfMessageBody\" :   \"string\" , \n         \"MessageId\" :   \"string\" , \n         \"SdkHttpMetadata\" :   { \n             \"HttpHeaders\" :   { \n                 \"Content-Length\" :   \"string\" , \n                 \"Content-Type\" :   \"string\" , \n                 \"Date\" :   datetime ( 2019 ,   1 ,   1 ), \n                 \"x-amzn-RequestId\" :   \"string\" \n             }, \n             \"HttpStatusCode\" :   123 \n         }, \n         \"SdkResponseMetadata\" :   { \n             \"RequestId\" :   \"string\" \n         } \n     }  }",
            "title": "JSON"
        }
    ]
}